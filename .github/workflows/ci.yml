name: CI
run-name: "CI (${{ github.event_name == 'pull_request' && format('pr: #{0}', github.event.number) || format('{0}: {1}', startsWith(github.event.ref, 'refs/tags') && 'tag' || 'branch', github.ref_name) }})"

on:
  - push
  - pull_request

env:
  COLUMNS: 190

concurrency:
  # Concurrency is defined in a way that concurrent builds against branches do
  # not cancel previous builds.
  # However, for every new build against the same pull request source branch,
  # all older builds against that same branch get canceled.
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.repository }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: Pre-Commit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Set Cache Key
      run: |
        echo "PY=$(python --version --version | sha256sum | cut -d' ' -f1)" >> "$GITHUB_ENV"
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}|${{ hashFiles('.pre-commit-hooks/*') }}
    - name: Install Dependencies
      run: |
        python -m pip install pre-commit==3.2.2
        pre-commit install --install-hooks
    - name: Run Pre-Commit
      run: |
        pre-commit run --show-diff-on-failure --color=always --all-files


  docs:
    name: Docs
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9 For Nox
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install Doc Requirements
      run: |
        nox --force-color -e docs --install-only

    - name: Build Docs
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e docs


  linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 15

    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        include:
          - {"salt-version": "3005.0", "python-version": "3.7", "source": "pypi"}
          - {"salt-version": "3005.0", "python-version": "3.8", "source": "pypi"}
          - {"salt-version": "3005.0", "python-version": "3.9", "source": "pypi"}
          - {"salt-version": "3006.0", "python-version": "3.7", "source": "pypi"}
          - {"salt-version": "3006.0", "python-version": "3.8", "source": "pypi"}
          - {"salt-version": "3006.0", "python-version": "3.9", "source": "pypi"}
          - {"salt-version": "3006.0", "python-version": "3.10", "source": "pypi"}
          - {"salt-version": "3006.x", "python-version": "3.10", "source": "onedir"}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install `tools` command
      if: ${{ matrix.source == 'onedir' }}
      run: |
        python -m pip install -r requirements/tools.txt

    - name: Download Salt Onedir
      if: ${{ matrix.source == 'onedir' }}
      run: |
        tools ci download-onedir --platform ${{ runner.os }} --arch ${{ runner.arch }} ${{ matrix.salt-version }}

    - name: Install Test Requirements
      env:
        SALT_REQUIREMENT: salt~=${{ matrix.salt-version }}
      run: |
        nox --force-color -e tests-${{ matrix.source == 'onedir' && 'onedir' || '3' }} --install-only

    - name: Test
      env:
        SALT_REQUIREMENT: salt~=${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-${{ matrix.source == 'onedir' && 'onedir' || '3' }} -- -vv tests/

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-${{ matrix.python-version }}-salt-${{ matrix.salt-version }}-${{ matrix.source }}.log
        path: artifacts/runtests-*.log


#  windows:
#    name: Windows
#    runs-on: windows-latest
#    needs: Pre-Commit
#
#    timeout-minutes: 40
#
#    strategy:
#      fail-fast: false
#      max-parallel: 3
#      matrix:
#        include:
#          - {"salt-version": "3005.0", "python-version": "3.8", "source": "pypi"}
#          - {"salt-version": "3005.0", "python-version": "3.9", "source": "pypi"}
#          - {"salt-version": "3006.0", "python-version": "3.8", "source": "pypi"}
#          - {"salt-version": "3006.0", "python-version": "3.9", "source": "pypi"}
#          - {"salt-version": "3006.0", "python-version": "3.10", "source": "pypi"}
#          - {"salt-version": "3006.x", "python-version": "3.10", "source": "onedir"}
#
#    steps:
#    - uses: actions/checkout@v3
#
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    - name: Install Nox
#      run: |
#        python -m pip install --upgrade pip
#        pip install nox
#
#    - name: Install `tools` command
#      if: ${{ matrix.source == 'onedir' }}
#      run: |
#        python -m pip install -r requirements/tools.txt
#
#    - name: Download Salt Onedir
#      if: ${{ matrix.source == 'onedir' }}
#      run: |
#        tools ci download-onedir --platform ${{ runner.os }} --arch ${{ runner.arch }} ${{ matrix.salt-version }}
#
#    - name: Install Test Requirements
#      env:
#        SALT_REQUIREMENT: salt~=${{ matrix.salt-version }}
#        EXTRA_REQUIREMENTS_INSTALL: Cython
#      run: |
#        nox --force-color -e tests-${{ matrix.source == 'onedir' && 'onedir' || '3' }} --install-only
#
#    - name: Test
#      env:
#        SALT_REQUIREMENT: salt~=${{ matrix.salt-version }}
#        SKIP_REQUIREMENTS_INSTALL: YES
#      run: |
#        nox --force-color -e tests-${{ matrix.source == 'onedir' && 'onedir' || '3' }} -- -vv tests/
#
#    - name: Upload Logs
#      if: always()
#      uses: actions/upload-artifact@main
#      with:
#        name: runtests-${{ runner.os }}-${{ matrix.python-version }}-salt-${{ matrix.salt-version }}-${{ matrix.source }}.log
#        path: artifacts/runtests-*.log


  macos:
    name: MacOS
    runs-on: macOS-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        include:
          - {"salt-version": "3005.0", "python-version": "3.9", "source": "pypi"}
          - {"salt-version": "3006.0", "python-version": "3.9", "source": "pypi"}
          - {"salt-version": "3006.0", "python-version": "3.10", "source": "pypi"}
          - {"salt-version": "3006.x", "python-version": "3.10", "source": "onedir"}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Install `tools` command
      if: ${{ matrix.source == 'onedir' }}
      run: |
        python -m pip install -r requirements/tools.txt

    - name: Download Salt Onedir
      if: ${{ matrix.source == 'onedir' }}
      run: |
        tools ci download-onedir --platform ${{ runner.os }} --arch ${{ runner.arch }} ${{ matrix.salt-version }}

    - name: Install Test Requirements
      env:
        SALT_REQUIREMENT: salt~=${{ matrix.salt-version }}
      run: |
        nox --force-color -e tests-${{ matrix.source == 'onedir' && 'onedir' || '3' }} --install-only

    - name: Test
      env:
        SALT_REQUIREMENT: salt~=${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-${{ matrix.source == 'onedir' && 'onedir' || '3' }} -- -vv tests/

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@main
      with:
        name: runtests-${{ runner.os }}-${{ matrix.python-version }}-salt-${{ matrix.salt-version }}-${{ matrix.source }}.log
        path: artifacts/runtests-*.log

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs:
      - docs
      - linux
#      - windows
      - macos
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install Nox
      run: |
        python -m pip install nox
    - name: Build a binary wheel and a source tarball
      run: |
        nox -e build

    - name: Upload Built Wheel and Source Tarball
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          dist/*.tar.gz
          dist/*.whl

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    if: github.event.repository.fork == false && github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment: release
    permissions:
      contents: write  # To be able to publish the gh-release
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    needs:
      - build
    steps:
    - uses: actions/checkout@v3

    - name: Download Built Wheel and Source Tarball
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/

    - name: Create Github Release
      uses: ncipollo/release-action@v1.12.0
      with:
        artifactErrorsFailBuild: true
        artifacts: "dist/*.tar.gz,dist/*.whl"
        draft: false
        generateReleaseNotes: true
        makeLatest: true
        prerelease: ${{ contains(github.ref, 'rc') }}
        removeArtifacts: true
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish distribution 📦 to Test PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.5
      with:
        repository-url: https://test.pypi.org/legacy/
        print-hash: true

    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.5
      with:
        print-hash: true
