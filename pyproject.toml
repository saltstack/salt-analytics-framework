[build-system]
requires = ["setuptools>=50.3.2", "wheel", "setuptools-declarative-requirements", "setuptools_scm[toml]>=3.4"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/saf/version.py"
write_to_template = "# pylint: skip-file\n\n__version__ = \"{version}\""

[tool.black]
line-length = 100

[tool.towncrier]
filename = "CHANGELOG.rst"
directory = "changelog/"
template = "changelog/_template.rst"

  [[tool.towncrier.type]]
  directory = "breaking"
  name = "Breaking Changes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "deprecation"
  name = "Deprecations"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "feature"
  name = "Features"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "improvement"
  name = "Improvements"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "bugfix"
  name = "Bug Fixes"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "doc"
  name = "Improved Documentation"
  showcontent = true

  [[tool.towncrier.type]]
  directory = "trivial"
  name = "Trivial/Internal Changes"
  showcontent = true

[tool.ruff]
line-length = 120
select = ["ALL"]
show-fixes = true
show-source = true
target-version = "py37"
respect-gitignore = true
src = [
  "src",
  "tests",
  "tools",
]
extend-exclude = [
  ".nox/**",
]
extend-include = [
  "setup.py",
  "noxfile.py",
  "src/**/*.pyi",
]
ignore = [
  # D* pydocstyle
  "D200",   # Reformat to one line
  "D212",   # Remove whitespace after opening quotes
  "COM",    # flake8-commas - Black takes care of this
  "ERA",    # eradicate
  "SIM108", # Use ternary operator `A = X if Y else Z` instead of `if`-`else`-block
]
ignore-init-module-imports = true
builtins = [
  "__opts__",
  "__salt__",
#  "__context__",
#  "__grains__",
#  "__pillar__",
  "__salt_system_encoding__",
]
# Group violations by containing file.
format = "grouped"

[tool.ruff.per-file-ignores]
"src/**/*.py" = [
  "D104",   # Missing docstring in public package
  "D107",   # Missing docstring in `__init__`
]
"src/**/*.pyi" = [
  "D100",   # Missing docstring in public module
]
"src/saf/models.py" = [
  "D106",   # Missing docstring in public nested class
  "SLF001", # Private member accessed"
  "ARG003", # Unused class method argument: `kwargs`
]
"src/saf/collect/logs.py" = [
  "TCH003",  # Move standard library import `pathlib` into a type-checking block
]
"src/saf/forward/disk.py" = [
  "TCH003",  # Move standard library import `pathlib` into a type-checking block
]
"src/saf/forward/test.py" = [
  "TCH003",  # Move standard library import `pathlib` into a type-checking block
]
"src/saf/saltext/**/*.py" = [
  "N807",   # Function name should not start and end with `__`
]
"setup.py" = [
  "D",
]
"noxfile.py" = [
  "D",
  "ANN",
  "PTH",
  "SLF001",
  "C901",
  "PLR0912",
  "DTZ005",
  "FBT002",
  "PLR0915", # Too many statements
]
"tools/**/*.py" = [
  "ANN201",   # Missing return type annotation for public function"
  "D104",     # Missing docstring in public package
  "FBT001",   # Boolean positional arg in function definition
  "FBT002",   # Boolean default value in function definition
]
"tests/**/*.py" = [
  "ANN",      # Ignore missing type annotations in tests
  "ARG001",   # Unused function argument
  "D100",     # Missing docstring in public module
  "D103",     # Missing docstring in public function
  "D104",     # Missing docstring in public package
  "DTZ003",   # The use of `datetime.datetime.utcnow()` is not allowed, use `datetime.datetime.now(tz=)` instead
  "PLR2004",  # Magic value used in comparison, consider replacing 3 with a constant variable
  "PT001",    # use @pytest.fixture() over @pytest.fixture
  "PT023",    # use @pytest.mark.<blah>() over @pytest.mark.<blah>
  "RET504",   # Unnecessary variable assignment before `return` statement"
  "S101",     # Ignore the use of 'assert ...' in tests
  "S603",     # `subprocess` call: check for execution of untrusted input
  "SIM117",   # Use a single `with` statement with multiple contexts instead of nested `with` statements
  "TCH002",   # Move third-party import into a type-checking block
  "TCH003",   # Move standard library import `pathlib` into a type-checking block
]
"tests/unit/process/test_regex_mask.py" = [
  "S105",   # Possible hardcoded password
]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.isort]
combine-as-imports = false
force-single-line = true
known-first-party = ["src"]
forced-separate = ["tests"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pep8-naming]
ignore-names = [
  "__virtual__",
]
[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
